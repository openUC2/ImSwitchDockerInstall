FROM python:3.9-slim

# Prevent Python from writing .pyc files
ENV PYTHONDONTWRITEBYTECODE=true

# Define workspace path
ENV WORKSPACE_PATH=/opt/vimba
WORKDIR ${WORKSPACE_PATH}

# Install system dependencies and utilities
RUN apt-get update && apt-get install -y \
        udev \
        libusb-1.0-0 \
        ca-certificates \
        usbutils \
        wget \
        tar \
        vim \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy pre-downloaded VimbaX SDK (requires manual download due to network restrictions)
# To use this dockerfile:
# 1. Download VimbaX_Setup-2025-1-Linux_ARM64.tar.gz from:
#    https://downloads.alliedvision.com/VimbaX/VimbaX_Setup-2025-1-Linux_ARM64.tar.gz
# 2. Place it in the same directory as this dockerfile
# 3. Build with: docker build -f dockerfile.full-sdk -t alvium:vimbax-full .
COPY VimbaX_Setup-2025-1-Linux_ARM64.tar.gz .

# Extract and install VimbaX SDK
RUN tar -xzf VimbaX_Setup-2025-1-Linux_ARM64.tar.gz -C /opt \
    && mv /opt/VimbaX_2025-1 /opt/VimbaX \
    && rm VimbaX_Setup-2025-1-Linux_ARM64.tar.gz

# Run VimbaX GenTL installation script
WORKDIR /opt/VimbaX/cti
RUN ./Install_GenTL_Path.sh

# Install VmbPy from the included wheel file
WORKDIR /opt/VimbaX/api/python
RUN python3 -m pip install --upgrade pip --no-cache-dir \
    && find . -name "vmbpy-*.whl" -exec pip3 install {} --no-cache-dir \;

# Set environment variables for VimbaX
ENV GENICAM_GENTL64_PATH="/opt/VimbaX/cti"

# Copy our test script
COPY list_cameras.py ${WORKSPACE_PATH}/

# Create installation info
RUN echo "Full VimbaX SDK installed" > /opt/vimba/installation_info.txt && \
    echo "GenTL Path: /opt/VimbaX/cti" >> /opt/vimba/installation_info.txt && \
    echo "VmbPy installed from SDK wheel" >> /opt/vimba/installation_info.txt

# Set workspace as the default working directory
WORKDIR ${WORKSPACE_PATH}

# Set entrypoint to our test script by default
ENTRYPOINT ["python", "list_cameras.py"]